import pandas as pd

from glicko.rating_engine import create_rating_periods
from glicko.rating_engine import extract_matches


class TestCreateRatingPeriods:

    # When strategy is "rounds", rating periods are created based on round numbers
    def test_rounds_strategy_creates_periods_based_on_round_numbers(self) -> None:
        # Create a test DataFrame with Round column
        data = {
            "Round": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            "OtherData": ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"],
        }
        match_df = pd.DataFrame(data)

        result_df = create_rating_periods(match_df, strategy="rounds", rating_periods=5)

        assert "RatingPeriod" in result_df.columns
        assert len(result_df) == 10

        # Check that rounds are properly distributed into 5 rating periods
        # Rounds 1-2 should be in period 1, 3-4 in period 2, etc.
        expected_periods = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
        assert result_df["RatingPeriod"].tolist() == expected_periods


# Generated by Qodo Gen


class TestExtractMatches:

    # Extract all matches when period is None
    def test_extract_all_matches_when_period_is_none(self) -> None:
        # Arrange
        data = {
            "RatingPeriod": [1, 2, 3],
            "HomeTeam": ["Team A", "Team B", "Team C"],
            "AwayTeam": ["Team X", "Team Y", "Team Z"],
            "Result": ["3-1", "2-2", "0-1"],
        }
        df = pd.DataFrame(data)

        # Act
        matches = extract_matches(df, period=None)

        # Assert
        assert len(matches) == 3
        assert matches[0].player1 == "Team A"
        assert matches[0].player2 == "Team X"
        assert matches[0].result == "3-1"
        assert matches[1].player1 == "Team B"
        assert matches[1].player2 == "Team Y"
        assert matches[1].result == "2-2"
        assert matches[2].player1 == "Team C"
        assert matches[2].player2 == "Team Z"
        assert matches[2].result == "0-1"

    # Handle empty dataframe input
    def test_handle_empty_dataframe_input(self) -> None:
        # Arrange
        columns = ["RatingPeriod", "HomeTeam", "AwayTeam", "Result"]
        empty_df = pd.DataFrame(columns=columns)

        # Act
        matches = extract_matches(empty_df)

        # Assert
        assert isinstance(matches, list)
        assert len(matches) == 0

    # Extract matches for a specific period when period is provided
    def test_extract_matches_for_specific_period(self) -> None:
        # Arrange
        data = {
            "RatingPeriod": [1, 2, 2, 3],
            "HomeTeam": ["Team A", "Team B", "Team C", "Team D"],
            "AwayTeam": ["Team X", "Team Y", "Team Z", "Team W"],
            "Result": ["3-1", "2-2", "0-1", "1-0"],
        }
        df = pd.DataFrame(data)

        # Act
        matches = extract_matches(df, period=2)

        # Assert
        assert len(matches) == 2
        assert matches[0].player1 == "Team B"
        assert matches[0].player2 == "Team Y"
        assert matches[0].result == "2-2"
        assert matches[1].player1 == "Team C"
        assert matches[1].player2 == "Team Z"
        assert matches[1].result == "0-1"
